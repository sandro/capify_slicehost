require 'digest/sha1'

# IP of your slice
SLICE_IP_ADDRESS = 'TODO'

# you get this from support@slicehost.com, right after you build a slice
INITIAL_SLICEHOST_ROOT_PASSWORD = 'TODO'

# your personal public key to use to log in to slice without password
# generate with ssh-keygen -t rsa -f slice_id_rsa
# example:  PRIVATE_KEY_PATH = "#{ENV['HOME']}/.ssh/slice_l4rk_id_rsa"
PRIVATE_KEY_PATH = "#{ENV['HOME']}/.ssh/id_rsa"

PUBLIC_KEY_PATH  = "#{PRIVATE_KEY_PATH}.pub"

# this is the user you'll log in to your slice with day-to-day
ADMIN_USERNAME = 'TODO'

# as set in configs/ssh_config
SSH_PORT = 23872

# as per /user/share/zoneinfo
TIMEZONE = "America/New_York"

role :slice, SLICE_IP_ADDRESS

set :passwords, {}

namespace :slice do
  desc "Basic configuration baseline."
  task :configure do
    # note we only log in as root the very first time we set up slice
    # from then on root ssh is disabled
    set :port, 22
    set :user, 'root'
    set :password, INITIAL_SLICEHOST_ROOT_PASSWORD

    change_root_password
    copy_config_files
    config_iptables
    set_timezone
    set_up_admin_user
    upgrade_system
    install_extras

    run "shutdown -r now"

    puts "Your slice is now updated and secured."
    puts "root pass: %s" % passwords['root']
    puts "Admin pass: %s" % passwords['admin']
  end

  task :change_root_password do
    generate_password('root')
    run "passwd", :pty => true do |channel, stream, data|
      2.times { channel.send_data passwords['root']+"\n" }
    end
  end

  task :copy_config_files do
    put(File.read("Configs/sshd_config"), "/etc/ssh/sshd_config")
    put(File.read("Configs/dots/bash_profile"), "/etc/skel/.bash_profile")
    put(File.read("Configs/dots/bashrc"), "/etc/skel/.bashrc")
    put(File.read("Configs/dots/vimrc"), "/etc/skel/.vimrc")
    put(File.read("Configs/iptables.up.rules"), "/etc/iptables.up.rules")
  end

  task :set_timezone do
    run "ln -sf /usr/share/zoneinfo/#{TIMEZONE} /etc/localtime"
  end

  task :config_iptables do
    run "iptables-restore < /etc/iptables.up.rules"
    run %q(sed -i "/iface lo inet loopback/a\pre-up iptables-restore < /etc/iptables.up.rules" /etc/network/interfaces)
  end

  task :set_up_admin_user do
    ADMIN_USER_HOME = "/home/#{ADMIN_USERNAME}"
    SSH_PUBLIC_KEY_TEMP_PATH = "#{ADMIN_USER_HOME}/sshpub.#{Time.now.to_i}"

    generate_password('admin')
    run "useradd -G www-data -m -s /bin/bash #{ADMIN_USERNAME}"
    run "passwd #{ADMIN_USERNAME}", :pty => true do |channel, stream, data|
      2.times { channel.send_data passwords['admin']+"\n" }
    end
  
    run "echo '#{ADMIN_USERNAME} ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"
    run "echo 'AllowUsers #{ADMIN_USERNAME}' >> /etc/ssh/sshd_config"
  
    run "mkdir #{ADMIN_USER_HOME}/.ssh"
    put(File.read(PUBLIC_KEY_PATH), "#{SSH_PUBLIC_KEY_TEMP_PATH}", :mode => 0600)
    run "cat #{SSH_PUBLIC_KEY_TEMP_PATH} >> #{ADMIN_USER_HOME}/.ssh/authorized_keys"
    run "rm #{SSH_PUBLIC_KEY_TEMP_PATH}"
    run "chown -R #{ADMIN_USERNAME}:#{ADMIN_USERNAME} #{ADMIN_USER_HOME}/.ssh"
    run "chmod 700 #{ADMIN_USER_HOME}/.ssh"
    run "chmod 600 #{ADMIN_USER_HOME}/.ssh/authorized_keys"
  end

  task :upgrade_system do
    run "locale-gen en_US.UTF-8 && /usr/sbin/update-locale LANG=en_US.UTF-8"
    run "aptitude update"
    run "aptitude -y safe-upgrade"
    run "aptitude -y full-upgrade"
    run "aptitude -y install build-essential"
  end

  desc "installs extra little utilities"
  task :install_extras do
    sudo "aptitude -y install vim"
    sudo "aptitude -y install screen"
    sudo "aptitude -y install git-core"
    sudo "aptitude -y install lsof"
    sudo "aptitude -y install htop"
  end

  namespace :install do
    desc "Installs the Rails stack"
    task :rails_stack do
      set :user, ADMIN_USERNAME
      ssh_options.merge! :port => SSH_PORT, :auth_methods => ['publickey'], :keys => [PRIVATE_KEY_PATH]
      puts ssh_options.inspect

      ruby
      rubygems
      mysql
      postfix # replaces exim which mysql installed with postfix
      rails
      mod_rails

      puts 'Note:  run dpkg-reconfigure postfix to set up postfix.'
    end

    desc "install mysql"
    task :mysql do
      sudo "aptitude install -y mysql-server mysql-client libmysqlclient15-dev" do |channel, stream, data|
        channel.send_data "\r"
      end
      gem_install "mysql"
    end

    desc "install postfix"
    task :postfix do
      run "export DEBIAN_FRONTEND=noninteractive"
      sudo "apt-get install -y postfix" do |channel, stream, data|
        if data =~/^General type of mail/
          channel.send_data "1\n"
        end
      end
    end

    desc "install ruby"
    task :ruby do
      sudo "aptitude install -y ruby1.8-dev ruby1.8 ri1.8 rdoc1.8 irb1.8 libreadline-ruby1.8 libruby1.8 libopenssl-ruby sqlite3 libsqlite3-ruby1.8"
      sudo "ln -s /usr/bin/ruby1.8 /usr/local/bin/ruby"
      sudo "ln -s /usr/bin/ri1.8 /usr/local/bin/ri"
      sudo "ln -s /usr/bin/rdoc1.8 /usr/local/bin/rdoc"
      sudo "ln -s /usr/bin/irb1.8 /usr/local/bin/irb"
      sudo "aptitude install -y imagemagick librmagick-ruby1.8 librmagick-ruby-doc libfreetype6-dev xml-core -y"
    end

    desc "install rubygems from source, since aptitude is stuck at 0.9.4"
    task :rubygems do
      # TODO:  you know, we ought to just have this in a bash script, push that script to slice, and execute it there
      run "if [ ! -d ~/src ]; then mkdir ~/src; fi"
      run "cd ~/src && wget http://rubyforge.org/frs/download.php/45905/rubygems-1.3.1.tgz"
      run "cd ~/src && tar xzf rubygems-1.3.1.tgz"
      run "cd ~/src/rubygems-1.3.1 && sudo ruby setup.rb"
      sudo "ln -sf /usr/bin/gem1.8 /usr/local/bin/gem"
    end

    desc "install rails"
    task :rails do
      gem_install "rails"
    end

    desc 'apache and mod rails'
    task :mod_rails do
      sudo 'aptitude install -y apache2 apache2.2-common apache2-mpm-prefork apache2-utils libexpat1 ssl-cert apache2-prefork-dev'
      sudo %q(sh -c 'echo "ServerName `uname -n`" >> /etc/apache2/apache2.conf')
      sudo "apache2ctl graceful"
      gem_install 'passenger'
      puts "Apache and Passenger have been installed but passenger still needs to be configured"
      puts "run 'sudo passenger-install-apache2-module' to finish the passenger installation"
    end
  end

  def gem_install(gem_name)
    sudo "gem install --no-rdoc --no-ri #{gem_name}"
  end

  def generate_password(pw_for)
    password = Digest::SHA1.hexdigest("#{pw_for}-#{SLICE_IP_ADDRESS}-#{Time.now.to_i}")
    passwords[pw_for] = password[0..12]
    puts "Passwords: #{passwords.inspect}"
  end
end
